# ~/.config/powershell/profile.ps1
# =============================================================================
# This file will be copied over to $Profile.CurrentUserAllHosts after running
# `chezmoi apply` by the script `run_after_00_symlink-config.ps1`:

# Update Path
$Env:PATH += ";C:\Program Files\7-Zip"
$Env:PATH += ";$Env:USERPROFILE\.local\bin"
$Env:PATH += ";$Env:USERPROFILE\.local\mingw64\bin" # gcc and more

# Includes
# -----------------------------------------------------------------------------

# Determine user profile parent directory.
$ConfigFolder = "$Env:USERPROFILE\.config\powershell"

# Load functions declarations from separate configuration file.
if (Test-Path $ConfigFolder/functions.ps1) {
    . $ConfigFolder/functions.ps1
}

# Load alias definitions from separate configuration file.
if (Test-Path $ConfigFolder/aliases.ps1) {
    . $ConfigFolder/aliases.ps1
}

# Environment Variables
# -----------------------------------------------------------------------------

$Env:EDITOR = "nvim"
$Env:SHELL = "pwsh"
$Env:HOME = $Env:USERPROFILE
$Env:XDG_CONFIG_HOME = "$Env:HOME\.config"
$Env:BAT_CONFIG_DIR = "$Env:XDG_CONFIG_HOME\bat"
$Env:KOMOREBI_CONFIG_HOME = "$Env:XDG_CONFIG_HOME\komorebi"
$Env:RIPGREP_CONFIG_PATH = "$Env:XDG_CONFIG_HOME\.ripgreprc"
$Env:PET_CONFIG_DIR = "$Env:XDG_CONFIG_HOME\pet"

# PowerShell Gallery modules
# -----------------------------------------------------------------------------

Import-Module posh-git

# PSReadLine Config
# -----------------------------------------------------------------------------

## Arrow keys search history with what I have already typed
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward

# Completions
# -----------------------------------------------------------------------------

## chezmoi
{{ completion "powershell" }}

## delta
if (Get-Command delta -errorAction SilentlyContinue) {
    Invoke-Expression -Command $(delta --generate-completion powershell | Out-String)
}

## fnm
if (Get-Command fnm -errorAction SilentlyContinue) {
    Invoke-Expression -Command $(fnm completions --shell power-shell | Out-String)
}

## gh cli
if (Get-Command gh -errorAction SilentlyContinue) {
    Invoke-Expression -Command $(gh completion -s powershell | Out-String)
}

## gitleaks
if (Get-Command gitleaks -errorAction SilentlyContinue) {
    Invoke-Expression -Command $(gitleaks completion powershell | Out-String)
}

## miniserve
if (Get-Command miniserve -errorAction SilentlyContinue) {
    Invoke-Expression -Command $(miniserve --print-completions powershell | Out-String)
}

# Shell integrations
# -----------------------------------------------------------------------------

## fnm
## Use zoxide for cd and invoke fnm immediately afterwards
if ((Get-Command fnm -errorAction SilentlyContinue) -and (Get-Command zoxide -errorAction SilentlyContinue)) {
    fnm env | Out-String | Invoke-Expression

    function global:Set-FnmOnLoad { If ((Test-Path .nvmrc) -Or (Test-Path .node-version)) { & fnm use --silent-if-unchanged } }
    function global:CdWithFnm { param($path); if ($path -eq $null) {z} else {z $path}; Set-FnmOnLoad }

    Set-Alias -Scope global cd_with_fnm CdWithFnm
    Set-Alias -Option AllScope -Scope global cd CdWithFnm
    Set-FnmOnLoad
}

## starship prompt
if (Get-Command starship -errorAction SilentlyContinue) {
    Invoke-Expression (&starship init powershell)
}

## zoxide
if (Get-Command zoxide -errorAction SilentlyContinue) {
    Invoke-Expression (& { (zoxide init powershell | Out-String) })
}

# vim:ft=ps1
