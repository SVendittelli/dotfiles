<#
  Author: Sam Vendittelli
  Description: PowersShell Profile containing aliases and functions to be loaded when a new PowerShell session is started.
#>

# Update Path
$Env:PATH += ";$Env:USERPROFILE\bin"

# Aliases
Set-Alias -Name cat -Value bat -Option AllScope
Set-Alias -Name cm -Value chezmoi
Set-Alias -Name e -Value nvim
Set-Alias -Name g -Value git
Set-Alias -Name lg -Value lazygit
Set-Alias -Name ls -Value Get-ChildItemPretty -Option AllScope
Set-Alias -Name ll -Value Get-ChildItemPretty
Set-Alias -Name la -Value Get-ChildItemPretty
Set-Alias -Name l -Value Get-ChildItemPretty
Set-Alias -Name open -Value Invoke-Item
Set-Alias -Name touch -Value New-Item
Set-Alias -Name vim -Value nvim
Set-Alias -Name vi -Value nvim
Set-Alias -Name which -Value Show-Command

# Functions
function Get-ChildItemPretty {
    <#
    .SYNOPSIS
        Runs eza with a specific set of arguments. Plus some line breaks before and after the output.
        Alias: ls, ll, la, l
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Path = $PWD
    )

    Write-Host ""
    eza -a -l --header --hyperlink --time-style relative $Path
    Write-Host ""
}

function Show-Command {
    <#
    .SYNOPSIS
        Displays the definition of a command. Alias: which
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Name
    )
    Write-Verbose "Showing definition of '$Name'"
    Get-Command $Name | Select-Object -ExpandProperty Definition
}

function tunnel {
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Port = $Env:PORT ?? 3000
    )
    Write-Host "localhost:$Port available at https://local.1sv.me/"
    cloudflared tunnel run --url "http://localhost:$Port" local
}

function wttr {
  <#
  .SYNOPSIS
    Gets weather for configured location
  #>
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Location = '{{ .location }}'
    )
    curl -fGsS "wttr.in/$Location"
}

function x {
  <#
  .SYNOPSIS
    Exits
  #>
  exit
}

# Environment Variables
$ENV:EDITOR = "nvim"
$ENV:SHELL = "pwsh"
$ENV:HOME = $Env:USERPROFILE
$Env:BAT_CONFIG_DIR = "$Env:USERPROFILE\.config\bat"
$Env:KOMOREBI_CONFIG_HOME = "$Env:USERPROFILE\.config\komorebi"
$Env:XDG_CONFIG_HOME = "$Env:USERPROFILE\.config"

# PowerShell Gallery modules
Import-Module posh-git

# PSReadLine Config
## Arrow keys search history with what I have already typed
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward

# Completions
## chezmoi
{{ completion "powershell" }}

## delta
Invoke-Expression -Command $(delta --generate-completion powershell | Out-String)

## fnm
Invoke-Expression -Command $(fnm completions --shell power-shell | Out-String)

## gh cli
Invoke-Expression -Command $(gh completion -s powershell | Out-String)

# Shell integrations

## fnm
## Use zoxide for cd and invoke fnm immediately afterwards
fnm env | Out-String | Invoke-Expression
function global:Set-FnmOnLoad { If ((Test-Path .nvmrc) -Or (Test-Path .node-version)) { & fnm use --silent-if-unchanged }
 }
function global:CdWithFnm { param($path); if ($path -eq $null) {z} else {z $path}; Set-FnmOnLoad }
Set-Alias -Scope global cd_with_fnm CdWithFnm
Set-Alias -Option AllScope -Scope global cd CdWithFnm
Set-FnmOnLoad

## starship prompt
Invoke-Expression (&starship init powershell)

## zoxide
Invoke-Expression (& { (zoxide init powershell | Out-String) })

# vim:ft=ps1
