# ~/.config/powershell/functions.ps1
# =============================================================================
# PowerShell functions sourced by `./profile.ps1`.

# Easier navigation
# -----------------------------------------------------------------------------

function Set-LocationHome {
    <#
    .SYNOPSIS
        Goes to user home directory.
    .INPUTS
        System.String
    .OUTPUTS
        None
    #>
    [CmdletBinding(
        SupportsShouldProcess=$true,
        ConfirmImpact='Low'
    )]
    param()

    begin {
        $path = $HOME
        Write-Verbose "Destination set to $path"
    }

    process {
        if ($PSCmdlet.ShouldProcess($path, 'Go to directory')) {
            Write-Verbose "Navigating to $path"
            cd $path
        }
    }
}

function Set-LocationUp {
    <#
    .SYNOPSIS
        Goes up a directory.
    .INPUTS
        System.String
    .OUTPUTS
        None
    #>
    [CmdletBinding(
        SupportsShouldProcess=$true,
        ConfirmImpact='Low'
    )]
    param()

    begin {
        $path = Convert-Path -Path ".."
        Write-Verbose "Destination set to $path"
    }

    process {
        if ($PSCmdlet.ShouldProcess($path, 'Go to directory')) {
            Write-Verbose "Navigating to $path"
            cd $path
        }
    }
}

function Set-LocationUp2 {
    <#
    .SYNOPSIS
        Goes up two directories.
    .INPUTS
        System.String
    .OUTPUTS
        None
    #>
    [CmdletBinding(
        SupportsShouldProcess=$true,
        ConfirmImpact='Low'
    )]
    param()

    begin {
        $path = Convert-Path -Path "../.."
        Write-Verbose "Destination set to $path"
    }

    process {
        if ($PSCmdlet.ShouldProcess($path, 'Go to directory')) {
            Write-Verbose "Navigating to $path"
            cd $path
        }
    }
}

function Set-LocationUp3 {
    <#
    .SYNOPSIS
        Goes up three directories.
    .INPUTS
        System.String
    .OUTPUTS
        None
    #>
    [CmdletBinding(
        SupportsShouldProcess=$true,
        ConfirmImpact='Low'
    )]
    param()

    begin {
        $path = Convert-Path -Path "../../.."
        Write-Verbose "Destination set to $path"
    }

    process {
        if ($PSCmdlet.ShouldProcess($path, 'Go to directory')) {
            Write-Verbose "Navigating to $path"
            cd $path
        }
    }
}

function Set-LocationUp4 {
    <#
    .SYNOPSIS
        Goes up four directories.
    .INPUTS
        System.String
    .OUTPUTS
        None
    #>
    [CmdletBinding(
        SupportsShouldProcess=$true,
        ConfirmImpact='Low'
    )]
    param()

    begin {
        $path = Convert-Path -Path "../../../.."
        Write-Verbose "Destination set to $path"
    }

    process {
        if ($PSCmdlet.ShouldProcess($path, 'Go to directory')) {
            Write-Verbose "Navigating to $path"
            cd $path
        }
    }
}

function Set-LocationUp5 {
    <#
    .SYNOPSIS
        Goes up five directories.
    .INPUTS
        System.String
    .OUTPUTS
        None
    #>
    [CmdletBinding(
        SupportsShouldProcess=$true,
        ConfirmImpact='Low'
    )]
    param()

    begin {
        $path = Convert-Path -Path "../../../../.."
        Write-Verbose "Destination set to $path"
    }

    process {
        if ($PSCmdlet.ShouldProcess($path, 'Go to directory')) {
            Write-Verbose "Navigating to $path"
            cd $path
        }
    }
}

# Directory browsing
# -----------------------------------------------------------------------------

function Get-ChildItemVisible {
    <#
    .SYNOPSIS
        Lists visible files in long format using eza.
        Alias: l, ll
    .PARAMETER Path
        The directory to list from.
    .INPUTS
        System.String[]
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Path = $PWD
    )

    eza --long --header --git --group-directories-first --time-style relative $Path
}

function Get-ChildItemAll {
    <#
    .SYNOPSIS
        Lists all files in long format using eza.
        Alias: la
    .PARAMETER Path
        The directory to list from.
    .INPUTS
        System.String[]
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Path = $PWD
    )

    eza --long --all --header --git --group-directories-first --time-style relative $Path
}

function Get-ChildItemTree {
    <#
    .SYNOPSIS
        Lists all files in a tree format using eza.
        Alias: lt
    .PARAMETER Path
        The directory to list from.
    .INPUTS
        System.String[]
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Path = $PWD
    )

    eza --long --all --header --git --git-ignore --tree --group-directories-first --time-style relative $Path
}

# File management
# -----------------------------------------------------------------------------

function New-ItemEmpty {
    <#
    .SYNOPSIS
        Creates an empty file or updates its timestamp.
    .Description
        Host-level *nix equivalent to `touch`.
    .INPUTS
        System.Object
    .OUTPUTS
        None
    .LINK
        New-Item
    #>
    [CmdletBinding()]
    param(
        [Parameter(
            Mandatory=$true,
            ValueFromPipeline=$true
        )]
        [string]$File
    )

    if (Test-Path $File) {
        (Get-ChildItem $File).LastWriteTime = Get-Date
    }
    else {
        New-Item -ItemType File $File
    }
}

# General
# -----------------------------------------------------------------------------

function Get-Aliases {
    <#
    .SYNOPSIS
        Lists aliases.
    .INPUTS
        None
    .OUTPUTS
        Microsoft.PowerShell.Commands.Internal.Format
    .LINK
        Get-Alias
    #>
    Get-Alias | Format-Table Name,ResolvedCommandName,Description,HelpUri
}

function Write-Done {
    <#
    .SYNOPSIS
        Write a formatted header using Write-Host
    .LINK
        Write-Host
    #>
  Write-Host "Done!" -ForegroundColor Green
}

function Write-Header {
    <#
    .SYNOPSIS
        Write a formatted header using Write-Host
    .LINK
        Write-Host
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Message
    )
  Write-Host "`n$Message`n" -ForegroundColor Cyan
}

# Other useful functions
# -----------------------------------------------------------------------------

# Change the window title to reflect the pwd using startship
function Invoke-Starship-PreCommand {
  $host.ui.RawUI.WindowTitle = "$env:USERNAME@$env:COMPUTERNAME`: $pwd `a"
}

function Just-Global {
    <#
    .SYNOPSIS
        Runs just scripts from the global justfile. Alias jg
    #>
    just --global-justfile $args
}

function Show-Command {
    <#
    .SYNOPSIS
        Displays the definition of a command. Alias: which
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Name
    )
    Write-Verbose "Showing definition of '$Name'"
    Get-Command $Name | Select-Object -ExpandProperty Definition
}

function tunnel {
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Port = $Env:PORT
    )
    $Port = if ($Env:PORT) { $Env:PORT } else { 3000 }
    Write-Host "localhost:$Port available at https://local.1sv.me/"
    cloudflared tunnel run --url "http://localhost:$Port" local
}

function wttr {
  <#
  .SYNOPSIS
    Gets weather for configured location
  #>
    param (
        [Parameter(Mandatory = $false, Position = 0)]
        [string]$Location = '{{ .location }}'
    )
    curl -fGsS "wttr.in/$Location"
}

function x {
  <#
  .SYNOPSIS
    Exits
  #>
  exit
}

# vim:ft=ps1
